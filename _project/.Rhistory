font_weight = "bold",
bold_target_only = FALSE,
target_col = c()
)
library(gtExtras)
install.packages("gtExtras")
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 4))) %>%
gt() %>%
tab_header("Multiple Regression for all Target Variables") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(3)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 4))) %>%
gt() %>%
tab_header("Multiple Regression for all Target Variables (w/o FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(3)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 4))) %>%
gt() %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(3)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 4))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(3)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 4))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(1)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
library(caret)
# Data import (will load selector widget to choose local file)
xlsx_import <- read_excel(file.choose(),sheet = "data")
library(tidyverse)
library(janitor)
library(readxl)
library(gt)
library(tidyverse)
library(janitor)
library(readxl)
library(gt)
gc()
library(tidyverse)
library(janitor)
library(readxl)
library(gt)
# Data import (will load selector widget to choose local file)
xlsx_import <- read_excel(file.choose(),sheet = "data")
# Data cleaning step
dat <- xlsx_import %>%
select(-c(url,url_id,transcript)) %>%
clean_names() %>%
mutate(
# Parsing video length string as number of seconds
vlength_s = str_match(video_length,"\\d+$") %>% as.integer(),
vlength_m = str_match(str_remove(video_length,":\\d+$"),"\\d+$") %>% as.integer(),
vlength_h = str_remove(video_length,"\\d+:\\d+$") %>% str_remove(":") %>% as.integer(),
vlength_h = ifelse(is.na(vlength_h),0,vlength_h),
video_length = vlength_s + vlength_m*60 + vlength_h*3600,
# Parsing missing values in sub count, negative comment count, and neutral comment count as 0
subs_count = subs_count %>% as.integer(),
subs_count = ifelse(is.na(subs_count),0,subs_count),
cmt_negative_n = cmt_negative_n %>% as.integer(),
cmt_negative_n = ifelse(is.na(cmt_negative_n),0,cmt_negative_n),
cmt_neutral_n = cmt_neutral_n %>% as.integer(),
cmt_neutral_n = ifelse(is.na(cmt_neutral_n),0,cmt_neutral_n)
) %>%
select(-c(vlength_s,vlength_m,vlength_h))
dat
# Removing FER emotion scores
dat_no_emote <- dat %>% select(-starts_with("emote"))
# Separating into one df for target vars and one for feature vars
df_y <- dat_no_emote %>% select(video_id,n_likes,n_views,starts_with("cmt_"))
df_x <- dat_no_emote %>% select(-c(n_likes,n_views),-starts_with("cmt_"))
# Function to get coef + sig table for an x df, a y df, and a selected variable string
f.linreg <- function(dfx,dfy,yvar){
# Joining x and y frames
df_temp <-
dfy %>%
select(video_id, y = !!sym(yvar)) %>%
left_join(dfx, by = 'video_id') %>%
select(-video_id)
# Fit model
model_temp <- lm(y~.,
data = df_temp)
# Extract coefficients
coefs_temp <- model_temp$coefficients %>% as.data.frame()
pvals_temp <- summary(model_temp)$coefficients[,4] %>% as.data.frame()
colnames(coefs_temp) <- paste(yvar,".coefs",sep="")
colnames(pvals_temp) <- "p"
pvals_temp <- pvals_temp %>% mutate(p = case_when(p <= .001 ~ "*",
p <= .01  ~ "**",
p <= .05  ~ "***",
p > .05   ~ " "))
colnames(pvals_temp) <- paste(yvar,".sig",sep="")
output <- coefs_temp %>%
cbind(pvals_temp) %>%
rownames_to_column("Feature")
return(output)
}
y_names <- colnames(df_y) %>% as.vector()
y_names = y_names[y_names!='video_id']
for(i in 1:length(y_names)){
var = y_names[i]
if(i == 1){
df0 = f.linreg(df_x,df_y,var)
}else{
dfn = f.linreg(df_x,df_y,var)
df0 <- left_join(df0,dfn,by = 'Feature')
}
}
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 4))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(1)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
y_names <- colnames(df_y) %>% as.vector()
y_names = y_names[y_names!='video_id']
for(i in 1:length(y_names)){
var = y_names[i]
if(i == 1){
df0 = f.linreg(df_x,df_y,var)
}else{
dfn = f.linreg(df_x,df_y,var)
df0 <- left_join(df0,dfn,by = 'Feature')
rm(dfn)
}
}
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 4))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(1)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 2))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(1)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 2))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(3)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(
cell_text(weight = "bold", size = 24)
)
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(
google_font("Raleway"),
default_fonts()
)
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 2))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(3)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(cell_text(weight = "bold", size = 24))
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(google_font("Raleway"),
default_fonts())
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 3))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(2)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(cell_text(weight = "bold", size = 24))
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(google_font("Raleway"),
default_fonts())
)
df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 3))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(2)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(cell_text(weight = "bold", size = 24))
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(google_font("Raleway"),
default_fonts())
)
y_names <- colnames(df_y) %>% as.vector()
y_names = y_names[y_names!='video_id']
for(i in 1:length(y_names)){
var = y_names[i]
if(i == 1){
df0 = f.linreg(df_x,df_y,var)
}else{
dfn = f.linreg(df_x,df_y,var)
df0 <- left_join(df0,dfn,by = 'Feature')
rm(dfn)
}
}
gt0 <- df0 %>%
select(!matches("_mean")) %>%
select(!matches("med")) %>%
mutate(across(where(is.numeric), ~ round(., 3))) %>%
gt(rowname_col = "Feature") %>%
tab_header(title = "Multiple Regression for all Target Variables",
subtitle = "without Facial Emotion Recognition (FER)") %>%
tab_stubhead(label = "Feature") %>%
tab_spanner_delim(delim = ".") %>%
tab_style(
locations = cells_column_labels(columns = everything()),
style     = list(
#Give a thick border below
cell_borders(sides = "bottom", weight = px(2)),
#Make text bold
cell_text(weight = "bold")
)
) %>%
#Apply different style to the title
tab_style(
locations = cells_title(groups = "title"),
style     = list(cell_text(weight = "bold", size = 24))
) %>%
opt_all_caps() %>%
opt_table_font(
font = list(google_font("Raleway"),
default_fonts())
)
gtsave(gt0,"gt0.html")
gtsave(gt0,"gt0.rtf")
gt0
