ESent_AnotherHCP,
ProbCare_BringTest,
ProbCare_RedoTest,
ProbCare_ProvideHist,
# Security Concerns
ConfidentInfoSafe,
WithheldInfoPrivacy,
# Demographics
AgeGrpB,
OccupationStatus,
ActiveDutyArmedForces,
MaritalStatus,
EducA,
BornInUSA,
SpeakEnglish,
RaceEthn5,
SexualOrientation,
SelfGender,
RentOrOwn,
IncomeRanges,
MailHHAdults
) %>%
sapply(as.numeric) %>%
as.data.frame() %>%
rownames_to_column("new_id")
df <- df %>%
mutate(
y = case_when(
AccessOnlineRecord <= 0 ~ 0,
AccessOnlineRecord >= 1 ~ 1
) %>% factor()
) %>%
select(new_id,y,everything()) %>%
select(-AccessOnlineRecord)
df1 = df
df1[df1 < 0] <- NA
na_index <- df1 %>% rowwise(new_id) %>%
select(-y) %>%
transmute(
n_na = sum(is.na(c_across())),
prop_na = mean(is.na(c_across()))
) %>%
filter(prop_na <= .1)
df <- df %>% filter(new_id %in% na_index$new_id)
df
d.demo <- df %>%
select(
new_id,y,
# Independent vars
AgeGrpB,OccupationStatus,ActiveDutyArmedForces,MaritalStatus,
EducA,BornInUSA,SpeakEnglish,RaceEthn5,SexualOrientation,
SelfGender,RentOrOwn,IncomeRanges,MailHHAdults
) %>%
mutate(
# NAs: assigning US median age of 38, group 2 (US Census Bureau)
AgeGrpB =               case_when(AgeGrpB == -9 ~ 2,
T ~ AgeGrpB) %>% factor(),
# NAs: assigning special 0 group for no information
OccupationStatus =      case_when(OccupationStatus %in% c(-9,-5,91) ~ 0,
T ~ OccupationStatus) %>% factor(),
# NAs: missing data assigned to not military, active/past active & nat.guard
# assigned to 1
ActiveDutyArmedForces = case_when(ActiveDutyArmedForces %in% c(-9,5) ~ 0,
ActiveDutyArmedForces %in% c(1,2,3,4) ~ 1),
# NAs: missing + single assigned to 0, married is 1, divorced/separated is 2,
# widowed is 3
MaritalStatus         = case_when(MaritalStatus %in% c(-9,-5,6) ~ 0,
MaritalStatus %in% c(1,2) ~ 1,
MaritalStatus %in% c(3,5) ~ 2,
MaritalStatus %in% c(4)   ~ 3) %>% factor(),
# NAs: missing + less than GED + GED assigned to 1, college grad and above
# to 3, college non-grad to 2
EducA                 = case_when(EducA %in% c(-9,1,2) ~ 1,
EducA == 3 ~ 2,
EducA == 4 ~ 3) %>% factor(),
# NAs: missing + non-US assigned to 0, US assigned to 1
BornInUSA             = case_when(BornInUSA == 1 ~ 1,
T ~ 0),
# NAs: missing + non-English assigned to 0, steps reversed to ascending order
SpeakEnglish          = case_when(SpeakEnglish %in% c(-9,-5,4) ~ 0,
SpeakEnglish == 3 ~ 1,
SpeakEnglish == 2 ~ 2,
SpeakEnglish == 1 ~ 3) %>% factor(),
# NAs: missing assigned to 'Other', values converted to str/factor.
RaceEthn5             = case_when(RaceEthn5 %in% c(-9,5) ~ "Other",
RaceEthn5 == 1 ~ "White",
RaceEthn5 == 2 ~ "Black",
RaceEthn5 == 3 ~ "Hispa",
RaceEthn5 == 4 ~ "Asian"),
# NAs: straight assigned to "S", others assigned to "NS"
SexualOrientation     = case_when(SexualOrientation == 1 ~ "S",
T ~ "NS"),
# NAs: coerced to N. Numerics coerced to M/F
SelfGender            = case_when(SelfGender == -9 ~ "N",
SelfGender == 1 ~ "M",
SelfGender == 2 ~ "F"),
# NAs: homeowners assigned to 'own', non-homeowners assigned to 'rent'
RentOrOwn             = case_when(RentOrOwn == 1 ~ "Own",
T ~ "Rent")
) %>%
mutate(
# Special case: determining poverty status
# First determine household size
hh = case_when(MailHHAdults %in% c(-1,1) ~ 1,
MailHHAdults %in% c(-9,-4,-2,2) ~ 2,
MailHHAdults == 3 ~ 3,
MailHHAdults == 4 ~ 4,
MailHHAdults == 5 ~ 5,
MailHHAdults >= 6 ~ 6),
IsPoverty = case_when(
# Households with 2 or fewer people
hh %in% c(1,2)   & IncomeRanges %in% c(-9,1,2) ~ 1,
hh %in% c(1,2)   & IncomeRanges > 2 ~ 0,
# 3
hh == 3          & IncomeRanges < 4 ~ 1,
hh == 3          & IncomeRanges >= 4 ~ 0,
# 4 or more
hh %in% c(4,5,6) & IncomeRanges < 5 ~ 1,
hh %in% c(4,5,6) & IncomeRanges >= 5 ~ 0
)
) %>%
select(-c(IncomeRanges,MailHHAdults,hh))
d.tech <- df %>%
select(
# Independent vars
UseInternet,
WhereSeekHealthInfo,
Internet_Broadbnd,
Internet_DialUp,
Internet_Cell,
Internet_WiFi,
TabletHealthWellnessApps,
OtherDevTrackHealth,
IntRsn_VisitedSocNet,
IntRsn_SharedSocNet,
IntRsn_WroteBlog,
IntRsn_SupportGroup,
IntRsn_YouTube
) %>%
mutate(
UseInternet               = case_when(UseInternet == 1 ~ 1,
T ~ 0),
WhereSeekHealthInfo       = case_when(WhereSeekHealthInfo == 7 ~ 1,
T ~ 0),
Internet_Broadbnd         = case_when(Internet_Broadbnd == 1 ~ 1,
T ~ 0),
Internet_DialUp           = case_when(Internet_DialUp == 1 ~ 1,
T ~ 0),
Internet_Cell             = case_when(Internet_Cell == 1 ~ 1,
T ~ 0),
Internet_WiFi             = case_when(Internet_WiFi == 1 ~ 1,
T ~ 0),
TabletHealthWellnessApps  = case_when(TabletHealthWellnessApps == 1 ~ 1,
T ~ 0),
OtherDevTrackHealth       = case_when(OtherDevTrackHealth == 1 ~ 1,
T ~ 0),
IntRsn_VisitedSocNet      = case_when(IntRsn_VisitedSocNet == 1 ~ 1,
T ~ 0),
IntRsn_SharedSocNet       = case_when(IntRsn_SharedSocNet == 1 ~ 1,
T ~ 0),
IntRsn_WroteBlog          = case_when(IntRsn_WroteBlog == 1 ~ 1,
T ~ 0),
IntRsn_SupportGroup       = case_when(IntRsn_SupportGroup == 1 ~ 1,
T ~ 0),
IntRsn_YouTube            = case_when(IntRsn_YouTube == 1 ~ 1,
T ~ 0)
)
d.life <- df %>%
select(
# Independent vars
SeekHealthInfo,
MostRecentCheckup2,
FreqGoProvider,
GeneralHealth,
HowLongModerateExerciseMinutes,
TimesStrengthTraining,
AverageTimeSitting
) %>%
mutate(
SeekHealthInfo                 = case_when(SeekHealthInfo == 1 ~ 1,
T ~ 0),
# Re-assigning: 4 to 0, by descending order of recency
MostRecentCheckup2             = case_when(MostRecentCheckup2 == 1 ~ 4,
MostRecentCheckup2 == 2 ~ 3,
MostRecentCheckup2 == 3 ~ 2,
MostRecentCheckup2 == 4 ~ 1,
T ~ 0),
# Keeping as is, assigning -9 missing as 0
FreqGoProvider                 = case_when(FreqGoProvider == -9 ~ 0,
T ~ FreqGoProvider),
# Re-assigning, 4 to 0, by descending order of condition,
# -9 assigned as "fair", or 1
GeneralHealth                  = case_when(GeneralHealth == 1 ~ 4,
GeneralHealth == 2 ~ 3,
GeneralHealth == 3 ~ 2,
GeneralHealth %in% c(-9,-5,4) ~ 1,
GeneralHealth == 5 ~ 0),
# Keeping as is, assigning missing and errors as 0
HowLongModerateExerciseMinutes = case_when(HowLongModerateExerciseMinutes <= 0 ~ 0,
T ~ HowLongModerateExerciseMinutes),
# Keeping as is, assigning missing and errors as 0
TimesStrengthTraining          = case_when(TimesStrengthTraining <= 0 ~ 0,
T ~ TimesStrengthTraining),
# Keeping as is, assigning missing and errors as 0
AverageTimeSitting             = case_when(AverageTimeSitting <= 0 ~ 0,
T ~ AverageTimeSitting)
)
d.access <- df %>%
select(
# Independent vars
ProviderMaintainEMR2,
WhoOffered_HCP,
WhoOffered_Insurer,
ESent_AnotherHCP,
ProbCare_BringTest,
ProbCare_RedoTest,
ProbCare_ProvideHist
) %>%
mutate(
# Assigning yes as 1, everything else as 0
ProviderMaintainEMR2 = case_when(ProviderMaintainEMR2 == 1 ~ 1,
T ~ 0),
# Assigning yes as 1, everything else as 0
WhoOffered_HCP       = case_when(WhoOffered_HCP == 1 ~ 1,
T ~ 0),
# Assigning yes as 1, everything else as 0
WhoOffered_Insurer   = case_when(WhoOffered_Insurer == 1 ~ 1,
T ~ 0),
# Assigning yes as 1, everything else as 0
ESent_AnotherHCP     = case_when(ESent_AnotherHCP == 1 ~ 1,
T ~ 0),
# Assigning yes as 1, everything else as 0
ProbCare_BringTest   = case_when(ProbCare_BringTest == 1 ~ 1,
T ~ 0),
# Assigning yes as 1, everything else as 0
ProbCare_RedoTest    = case_when(ProbCare_RedoTest == 1 ~ 1,
T ~ 0),
# Assigning yes as 1, everything else as 0
ProbCare_ProvideHist = case_when(ProbCare_ProvideHist == 1 ~ 1,
T ~ 0)
)
d.trust <- df %>%
select(
# Independent vars
ConfidentInfoSafe,
WithheldInfoPrivacy
) %>%
mutate(
ConfidentInfoSafe   = case_when(ConfidentInfoSafe %in% c(-9,-5,3) ~ 0,
ConfidentInfoSafe == 2 ~ 1,
ConfidentInfoSafe == 1 ~ 2),
WithheldInfoPrivacy = case_when(WithheldInfoPrivacy == 1 ~ 1,
T ~ 0)
)
d.all.nopca <- cbind(d.demo,d.tech,d.life,d.access,d.trust) %>% select(-new_id)
set.seed(8675309)
# splitting to train/test
splits  <- initial_split(d.all.nopca,
prop = .9,
strata = y)
d.other <- training(splits)
d.test  <- testing(splits)
# Setting validation split for CV resampling
val_set <- validation_split(d.other,
prop = .8,
strata = y)
recipe.d <- recipe(y ~ ., data = d.other) %>%
# This step creates dummy variables out of discrete nominal variables.
step_dummy(
AgeGrpB,
OccupationStatus,
MaritalStatus,
EducA,
SpeakEnglish,
RaceEthn5,
SelfGender,
SexualOrientation,
RentOrOwn, -all_outcomes()
) %>%
# This step removes all zero-variance variables. For our data this is not needed, but included
# for the sake of caution.
step_zv(all_numeric_predictors()) %>%
# Centering and scaling of numeric variables.
step_normalize(all_numeric_predictors()) %>%
# Per-category PCA for Technology
step_pca(
UseInternet,
WhereSeekHealthInfo,
Internet_Broadbnd,
Internet_DialUp,
Internet_Cell,
Internet_WiFi,
TabletHealthWellnessApps,
OtherDevTrackHealth,
IntRsn_VisitedSocNet,
IntRsn_SharedSocNet,
IntRsn_WroteBlog,
IntRsn_SupportGroup,
IntRsn_YouTube,
num_comp = 5, prefix = "tech.pc.") %>%
# Per-category PCA for Health-mindedness and lifestyle
step_pca(
SeekHealthInfo,
MostRecentCheckup2,
FreqGoProvider,
GeneralHealth,
HowLongModerateExerciseMinutes,
TimesStrengthTraining,
AverageTimeSitting,
num_comp = 5, prefix = "life.pc."
) %>%
# Per-category PCA for Access
step_pca(
ProviderMaintainEMR2,
WhoOffered_HCP,
WhoOffered_Insurer,
ESent_AnotherHCP,
ProbCare_BringTest,
ProbCare_RedoTest,
ProbCare_ProvideHist,
num_comp = 4, prefix = "access.pc."
)
recipe.d %>%
prep() %>%
bake(d.other)
grid.logreg <- tibble(
penalty = c(10^seq(-4,-1,length.out = 10))
)
grid.logreg
grid.logreg <- tibble(
penalty = c(10^seq(-4,-1,length.out = 10))
)
grid.logreg
model.logreg <-
logistic_reg(penalty = tune(),
mixture = 1) %>%
set_engine("glmnet")
wf.logreg <-
workflow() %>%
add_model(model.logreg) %>%
add_recipe(recipe.d)
tune.logreg <-
wf.logreg %>%
tune_grid(val_set,
grid = grid.logreg,
control = control_grid(save_pred = T),
metrics = metric_set(roc_auc))
# Keep best param
best.logreg <- tune.logreg %>%
select_best(metric = "roc_auc")
# Plotting tuning results
tune.logreg %>%
collect_metrics() %>%
ggplot(aes(x = penalty,
y = mean)) +
geom_point()+
geom_line()+
ylab("AUC of ROC curve")+
scale_x_log10(labels = scales::label_number())+
labs(title = "Penalty grid-search by AUC for LASSO GLMNET model")
grid.svm <- tibble(
cost = c(2^seq(-10,-1,length.out = 10))
)
grid.svm
model.svm <-
svm_linear(mode = "classification",
cost = tune()) %>%
set_engine("kernlab")
wf.svm <-
workflow() %>%
add_model(model.svm) %>%
add_recipe(recipe.d)
tune.svm <-
wf.svm %>%
tune_grid(val_set,
grid = grid.svm,
control = control_grid(save_pred = T),
metrics = metric_set(roc_auc))
# Keep best param
best.svm <- tune.svm %>%
select_best(metric = "roc_auc")
# Plotting tuning results
tune.svm %>%
collect_metrics() %>%
ggplot(aes(x = cost,
y = mean)) +
geom_point()+
geom_line()+
ylab("AUC of ROC curve")+
scale_x_log10(labels = scales::label_number())+
labs(title = "Cost grid-search by AUC for kernlab L-SVM model")
# Comparison
auc.logreg <- tune.logreg %>%
collect_predictions(parameters = best.logreg) %>%
roc_curve(y,.pred_0) %>%
mutate(model = "GLMNET Logistic Regression")
auc.svm    <- tune.svm %>%
collect_predictions(parameters = best.svm) %>%
roc_curve(y,.pred_0) %>%
mutate(model = "kernlab Linear SVM")
rbind(auc.logreg,auc.svm) %>%
ggplot(
aes(
x = 1-specificity,
y = sensitivity,
col = model,
fill = model
)
)+
geom_path(size = 2,
alpha = .5)+
geom_abline(lty = 3)+
coord_equal()+
scale_color_viridis_d()+
theme_bw() +
labs(title = "ROC Curve colored by candidate models")
auc.logreg <- tune.logreg %>%
collect_predictions(parameters = best.logreg) %>% roc_auc(y,.pred_0) %>% .$.estimate
auc.svm    <- tune.svm %>%
collect_predictions(parameters = best.svm) %>% roc_auc(y,.pred_0) %>% .$.estimate
data.frame(
Model = c("Log. Regression","Linear SVM"),
AUC   = c(auc.logreg, auc.svm)
)
model.logreg.final <-
logistic_reg(penalty = best.logreg$penalty,
mixture = 1) %>%
set_engine("glmnet")
wf.logreg.final <- workflow() %>%
add_model(model.logreg.final) %>%
add_recipe(recipe.d)
set.seed(8675309)
fit.logreg.final <- wf.logreg.final %>%
fit(d.other)
model.svm.final <-
svm_linear(cost = best.svm$cost,
mode = "classification") %>%
set_engine("kernlab")
wf.svm.final <- workflow() %>%
add_model(model.svm.final) %>%
add_recipe(recipe.d)
set.seed(8675309)
fit.svm.final <- wf.svm.final %>%
fit(d.other)
wf.logreg.test   <-
wf.logreg %>%
update_model(model.logreg.final)
wf.svm.test   <-
wf.svm %>%
update_model(model.svm.final)
set.seed(8675309)
fit.logreg.test <-
wf.logreg.test %>%
last_fit(splits)
set.seed(8675309)
fit.svm.test <-
wf.svm.test %>%
last_fit(splits)
# Test metrics for Logistic Regression
fit.logreg.test %>%
collect_metrics()
fit.logreg.test %>%
collect_predictions() %>%
roc_curve(y, .pred_0) %>%
autoplot(title("GLMNET logistic regression"))
# Test metrics for l-SVM
fit.svm.test %>%
collect_metrics()
fit.svm.test %>%
collect_predictions() %>%
roc_curve(y, .pred_0) %>%
autoplot(title = "kernlab linear SVM")
# By Logistic Regression
logreg.explainer <- explain_tidymodels(
model = fit.logreg.final,
data = d.other %>% select(-y),
y = d.other %>% pull(y) %>% as.character() %>% as.numeric(),
label = "GLMNET Logistic Regression",
verbose = F
)
set.seed(8675309)
logreg.varImp <- model_parts(logreg.explainer)
# By SVM
svm.explainer <- explain_tidymodels(
model = fit.svm.final,
data = d.other %>% select(-y),
y = d.other %>% pull(y) %>% as.character() %>% as.numeric(),
label = "kernlab L-SVM",
verbose = F
)
set.seed(8675309)
svm.varImp <- model_parts(svm.explainer)
plot(logreg.varImp, show_boxplots = TRUE)/plot(svm.varImp, show_boxplots = TRUE)
fit.logreg.final
fit.logreg.final %>%
tidy(exponentiate = T)
fit.logreg.final %>%
tidy() %>%
fit.svm.final %>%
tidy(exponentiate = T)
fit.logreg.final %>%
tidy() %>%
fit.logreg.final %>%
tidy()
fit.logreg.final %>%
tidy()
fit.logreg.final %>%
tidy() %>%
sort(estimate)
fit.logreg.final %>%
tidy() %>%
arrange(estimate)
