select(-cost) %>%
sapply(typeof) %>%
as.data.frame(col.names = c("type")) %>%
rownames_to_column("colname")
index
df %>%
select(-cost) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
index <- df %>%
select(-cost) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
df[,2]
colnames(index[,2])
index[,2]
colnames(index)
colnames(index) <- c("colname","coltype")
index
print(i)
for(i in (1:10)){
print(i)
}
print(i)
for(i in (1:length(index))){
print(i)
}
for(i in (1:nrow(index))){
print(i)
}
print(index[i,1])
for(i in (1:nrow(index))){
print(index[i,1])
}
print(index[i,2])
index <- df %>%
select(-cost) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
print(index[i,1])
print(index[i,2])
}
index <- df %>%
select(-cost) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = print(index[i,1])
type = print(index[i,2])
if(type == "double"){
plot_scatter(df,name)
}else if(type == "logical"){
plot_stacked_density(df,name)
}
}
index <- df %>%
select(-cost) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = index[i,1]
type = index[i,2]
if(type == "double"){
plot_scatter(df,name)
}else if(type == "logical"){
plot_stacked_density(df,name)
}
}
index <- df %>%
select(-cost) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = index[i,1]
type = index[i,2]
if(type == "double"){
print(plot_scatter(df,name))
}else if(type == "logical"){
print(plot_stacked_density(df,name))
}
}
index <- df %>%
select(-c(id,cost,cost_ln)) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = index[i,1]
type = index[i,2]
if(type == "double"){
print(plot_scatter(df,name))
}else if(type == "logical"){
print(plot_stacked_density(df,name))
}
}
df <- clean_data(read_csv("data/sheet4.csv",show_col_types = FALSE))
df_naomit <- df %>% na.omit()
write_csv(df,"data/data.csv")
write_csv(df_naomit,"data/data_naomit.csv")
na_table(df)
na_table(df) %>% kable()
setwd("G:/My Drive/academics/2122_uic_ms/2022_spring/ids506_health/mission")
library(tidyverse)
library(tidymodels)
library(patchwork)
library(kableExtra)
source("scripts/clean_data.R")
source("scripts/na_table.R")
df <- clean_data(read_csv("data/sheet4.csv",show_col_types = FALSE))
df_naomit <- df %>% na.omit()
write_csv(df,"data/data.csv")
write_csv(df_naomit,"data/data_naomit.csv")
na_table(df) %>% kable()
shortLM.ft %>% predict(d.test)
setwd("G:/My Drive/academics/2122_uic_ms/2022_spring/ids506_health/mission")
library(tidyverse) |> suppressPackageStartupMessages()
library(tidymodels) %>% suppressPackageStartupMessages()
library(patchwork) %>% suppressPackageStartupMessages()
library(kableExtra) %>% suppressPackageStartupMessages()
source("scripts/clean_data.R")
source("scripts/na_table.R")
df <- clean_data(read_csv("data/sheet4.csv",show_col_types = FALSE))
df_naomit <- df %>% na.omit()
write_csv(df,"data/data.csv")
write_csv(df_naomit,"data/data_naomit.csv")
na_table(df)
####################################### DISCRETE PLOTTING FUNCTION #############################
plot_discrete <- function(dframe,col){
pbase <- dframe %>%
ggplot()+
aes(x = cost,
fill = !!sym(col))+
scale_fill_viridis_d()+
theme_minimal()
(pbase +
geom_histogram(bins = 10,position="fill") +
theme(legend.position = "none")) | (pbase + geom_histogram(bins = 10))
}
####################################### CONTINUOUS PLOTTING FUNCTION ############################
plot_continuous <- function(dframe,col){
pbase <- dframe %>%
ggplot()+
aes(y = cost,
x = !!sym(col))+
geom_point(color = "#440154")+
geom_smooth(color = "#fde725", method = "lm")+
scale_fill_viridis_d()+
theme_minimal()
return(pbase)
}
####################################### DISCRETE PLOTTING FUNCTION #############################
plot_discrete <- function(dframe,col){
pbase <- dframe %>%
ggplot()+
aes(x = cost,
fill = !!sym(col))+
scale_fill_viridis_d()+
theme_minimal()
(pbase +
geom_histogram(bins = 10,position="fill") +
theme(legend.position = "none")) | (pbase + geom_histogram(bins = 10))
}
####################################### CONTINUOUS PLOTTING FUNCTION ############################
plot_continuous <- function(dframe,col){
pbase <- dframe %>%
ggplot()+
aes(y = cost,
x = !!sym(col))+
geom_point(color = "#440154")+
geom_smooth(color = "#fde725", method = "lm")+
scale_fill_viridis_d()+
theme_minimal()
return(pbase)
}
####################################### SPLITTING #######################################
d <- df %>% na.omit()
na_table(d)
set.seed(8675309)
splitkey <- initial_split(d,
prop = .9,
strata = cost)
d.train <- training(splitkey)
d.test  <- testing(splitkey)
####################################### DISCRETE PLOTTING FUNCTION #############################
plot_discrete <- function(dframe,ycol = "y",col){
pbase <- dframe %>%
ggplot()+
aes(x = !!sym(ycol),
fill = !!sym(col))+
scale_fill_viridis_d()+
theme_minimal()
(pbase +
geom_histogram(bins = 10,position="fill") +
theme(legend.position = "none")) | (pbase + geom_histogram(bins = 10))
}
####################################### CONTINUOUS PLOTTING FUNCTION ############################
plot_continuous <- function(dframe,col){
pbase <- dframe %>%
ggplot()+
aes(y = !!sym(ycol),
x = !!sym(col))+
geom_point(color = "#440154")+
geom_smooth(color = "#fde725", method = "lm")+
scale_fill_viridis_d()+
theme_minimal()
return(pbase)
}
####################################### DRAW ALL PLOTS ##########################################
index <- df %>%
select(-c(id,cost,cost_ln)) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = index[i,1]
type = index[i,2]
if(type == "double"){
print(plot_continuous(df,name))
}else if(type == "logical"){
print(plot_discrete(df,name))
}
}
####################################### DRAW ALL PLOTS ##########################################
index <- df %>%
select(-c(id,cost,cost_ln)) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = index[i,1]
type = index[i,2]
if(type == "double"){
print(plot_continuous(df,"cost",name))
}else if(type == "logical"){
print(plot_discrete(df,"cost",name))
}
}
####################################### DISCRETE PLOTTING FUNCTION #############################
plot_discrete <- function(dframe,ycol = "y",col){
pbase <- dframe %>%
ggplot()+
aes(x = !!sym(ycol),
fill = !!sym(col))+
scale_fill_viridis_d()+
theme_minimal()
(pbase +
geom_histogram(bins = 10,position="fill") +
theme(legend.position = "none")) | (pbase + geom_histogram(bins = 10))
}
####################################### CONTINUOUS PLOTTING FUNCTION ############################
plot_continuous <- function(dframe,ycol = "y",col){
pbase <- dframe %>%
ggplot()+
aes(y = !!sym(ycol),
x = !!sym(col))+
geom_point(color = "#440154")+
geom_smooth(color = "#fde725", method = "lm")+
scale_fill_viridis_d()+
theme_minimal()
return(pbase)
}
####################################### DRAW ALL PLOTS ##########################################
index <- df %>%
select(-c(id,cost,cost_ln)) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = index[i,1]
type = index[i,2]
if(type == "double"){
print(plot_continuous(df,"cost",name))
}else if(type == "logical"){
print(plot_discrete(df,"cost",name))
}
}
####################################### DRAW ALL PLOTS ##########################################
index <- df %>%
select(-c(id,cost,cost_ln)) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = index[i,1]
type = index[i,2]
if(type %in% c("double","numeric","integer")){
paste("Figure ",i,": Plotting ",name, " against Target Variable",sep = "") %>% print()
print(plot_continuous(df,"cost",name))
}else if(type %in% c("factor","logical")){
paste("Figure ",i,": Plotting ",name, " against Target Variable",sep = "") %>% print()
print(plot_discrete(df,"cost",name))
}
}
####################################### DRAW ALL PLOTS ##########################################
index <- df %>%
select(-c(id,cost,cost_ln)) %>%
sapply(typeof) %>%
as.data.frame() %>%
rownames_to_column("colname")
colnames(index) <- c("colname","coltype")
for(i in (1:nrow(index))){
name = index[i,1]
type = index[i,2]
if(type %in% c("double","numeric","integer")){
plt.title <- paste("Figure ",i,": Plotting ",name, " against Target Variable",sep = "")
print(plot_continuous(df,"cost",name)+ggtitle(plt.title))
}else if(type %in% c("factor","logical")){
plt.title <- paste("Figure ",i,": Plotting ",name, " against Target Variable",sep = "")
print(plot_discrete(df,"cost",name)+plot_annotation(title = plt.title))
}
}
####################################### SPLITTING #######################################
d <- df %>% na.omit()
na_table(d)
set.seed(8675309)
splitkey <- initial_split(d,
prop = .9,
strata = cost)
d.train <- training(splitkey)
d.test  <- testing(splitkey)
####################################### SINGLE-X REGRESSION #######################################
# Set preprocessing recipe
shortLM.rc <- recipe(cost ~ body_wgt,
data = d.train)
# Set engine
shortLM.en <- linear_reg() %>% set_engine("lm")
# Combining recipe + engine
shortLM.wf <- workflow() %>%
add_model(shortLM.en) %>%
add_recipe(shortLM.rc)
# Fitting
set.seed(8675309)
shortLM.ft <- shortLM.wf %>% fit(data=d.train)
# Fit Summary
shortLM.sm <- shortLM.ft %>%
extract_fit_parsnip() %>%
tidy()
shortLM.sm
shortLM.ft %>% predict(d.test)
mape(truth = d.test$cost,
estimate = shortLM.pred)
yardstick::mape(truth = d.test$cost,
estimate = shortLM.pred)
yardstick::mape(truth = d.test$cost, estimate = shortLM.pred)
shortLM.pred
shortLM.pred
shortLM.pred <- shortLM.ft %>% predict(d.test)
yardstick::mape(truth = d.test$cost, estimate = shortLM.pred)
shortLM.pred <- shortLM.ft %>% predict(d.test)
shortLM.pred <- shortLM.ft %>% last_fit(splitkey)
shortLM.pred
yardstick::mape(data = shortLM.pred)
shortLM.pred
yardstick::mape(data = shortLM.pred,truth = d.test$cost)
shortLM.pred
####################################### SINGLE-X REGRESSION #######################################
# Set preprocessing recipe
shortLM.rc <- recipe(cost ~ body_wgt,
data = d.train)
# Set engine
shortLM.en <- linear_reg() %>% set_engine("lm")
# Combining recipe + engine
shortLM.wf <- workflow() %>%
add_model(shortLM.en) %>%
add_recipe(shortLM.rc)
# Fitting
set.seed(8675309)
shortLM.ft <- shortLM.wf %>% fit(data=d.train)
# Fit Summary
shortLM.sm <- shortLM.ft %>%
extract_fit_parsnip() %>%
tidy()
shortLM.sm
shortLM.pred <- shortLM.ft %>% last_fit(splitkey)
yardstick::mape(data = shortLM.pred,
estimate = .predictions,
truth = d.test$cost)
d.test$cost
yardstick::mape(data = shortLM.pred,
estimate = .predictions,
truth = d.test$cost)
d.test$cost
####################################### SINGLE-X REGRESSION #######################################
# Set preprocessing recipe
shortLM.rc <- recipe(cost ~ body_wgt,
data = d.train)
# Set engine
shortLM.en <- linear_reg() %>% set_engine("lm")
# Combining recipe + engine
shortLM.wf <- workflow() %>%
add_model(shortLM.en) %>%
add_recipe(shortLM.rc)
# Fitting
set.seed(8675309)
shortLM.ft <- shortLM.wf %>% fit(data=d.train)
# Fit Summary
shortLM.sm <- shortLM.ft %>%
extract_fit_parsnip() %>%
tidy()
shortLM.sm
shortLM.pred <- shortLM.ft %>% last_fit(splitkey)
yardstick::mape(data = shortLM.pred,
estimate = .predictions,
truth = d.test %>% select(cost))
mape(shortLM.ft)
mape(shortLM.pred)
shortLM.pred <- shortLM.ft %>% last_fit(splitkey) %>% collect_predictions()
shortLM.pred
mape(shortLM.pred)
shortLM.pred
mape(shortLM.pred,
truth = cost,
estimate = .pred)
####################################### TEST SET ACCURACY: MAPE #######################################
shortLM.pred <- shortLM.ft %>% last_fit(splitkey) %>% collect_predictions()
mape(shortLM.pred,
truth = cost,
estimate = .pred)
####################################### MULTIPLE REGRESSION #######################################
# Set preprocessing recipe
multiLM.rc <- recipe(cost ~ .,
data = d.train) %>%
step_mutate(body_bmi  = body_wgt/((body_hgt/100)^2), role = "redundant") %>%
step_mutate(wgt_under = ifelse(body_bmi < 18.5,                 TRUE,FALSE),
wgt_norml = ifelse(18.5 <= body_bmi & body_bmi < 25,TRUE,FALSE),
wgt_overw = ifelse(25 <= body_bmi & body_bmi <= 30, TRUE,FALSE),
wgt_obese = ifelse(30 < body_bmi,                   TRUE,FALSE)) %>%
update_role(c(cost_ln,stay_total,implant_cost,body_wgt,body_hgt),new_role = "redundant") %>%
update_role(c(
# Setting leakages
tidyselect::starts_with("code"),
tidyselect::starts_with("stay"),
tidyselect::starts_with("implant")
),new_role = "leakage") %>%
update_role(id,new_role = "ID") %>%
step_zv(all_numeric_predictors())
# Set engine
multiLM.en <- linear_reg() %>% set_engine("lm")
# Combining recipe + engine
multiLM.wf <- workflow() %>%
add_model(multiLM.en) %>%
add_recipe(multiLM.rc)
# Fitting
set.seed(8675309)
multiLM.ft <- multiLM.wf %>% fit(data=d.train)
# Fit Summary
multiLM.sm <- multiLM.ft %>%
extract_fit_parsnip() %>%
tidy()
multiLM.sm %>%
filter(term != "(Intercept)") %>%
arrange(p.value)
####################################### TEST SET ACCURACY: MAPE #######################################
multiLM.pred <- multiLM.ft %>% last_fit(splitkey) %>% collect_predictions()
mape(multiLM.pred,
truth = cost,
estimate = .pred)
####################################### TEST SET ACCURACY: MAPE #######################################
shortLM.pred <- shortLM.ft %>% last_fit(splitkey) %>% collect_predictions()
mape(shortLM.pred,
truth = cost,
estimate = .pred)
####################################### MULTIPLE REGRESSION #######################################
# Set preprocessing recipe
multiLM.rc <- recipe(cost ~ .,
data = d.train) %>%
step_mutate(body_bmi  = body_wgt/((body_hgt/100)^2), role = "redundant") %>%
step_mutate(wgt_under = ifelse(body_bmi < 18.5,                 TRUE,FALSE),
wgt_norml = ifelse(18.5 <= body_bmi & body_bmi < 25,TRUE,FALSE),
wgt_overw = ifelse(25 <= body_bmi & body_bmi <= 30, TRUE,FALSE),
wgt_obese = ifelse(30 < body_bmi,                   TRUE,FALSE)) %>%
update_role(c(cost_ln,stay_total,implant_cost,body_wgt,body_hgt),new_role = "redundant") %>%
update_role(c(
# Setting leakages
tidyselect::starts_with("code"),
tidyselect::starts_with("stay"),
tidyselect::starts_with("implant")
),new_role = "leakage") %>%
update_role(id,new_role = "ID") %>%
step_zv(all_numeric_predictors())
# Set engine
multiLM.en <- linear_reg() %>% set_engine("lm")
# Combining recipe + engine
multiLM.wf <- workflow() %>%
add_model(multiLM.en) %>%
add_recipe(multiLM.rc)
# Fitting
set.seed(8675309)
multiLM.ft <- multiLM.wf %>% fit(data=d.train)
# Fit Summary
multiLM.sm <- multiLM.ft %>%
extract_fit_parsnip() %>%
tidy()
multiLM.sm %>%
#filter(term != "(Intercept)") %>%
arrange(p.value)
